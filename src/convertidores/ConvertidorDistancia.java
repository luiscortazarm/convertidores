package convertidores;

import calculos.Distancia;
import javax.swing.JOptionPane;

public class ConvertidorDistancia extends javax.swing.JFrame {
    
    
    String de, a;
    double ingresa, km, m, cm, ml, ft, in;
    
   Distancia calcular = new Distancia();

    /**
     * Creates new form ConvertidorDistancia
     */
    public ConvertidorDistancia() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Convertidor de Distancia");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ingresarCantidad = new javax.swing.JTextField();
        resultadoConversion = new javax.swing.JTextField();
        A = new javax.swing.JComboBox<>();
        DE = new javax.swing.JComboBox<>();
        Convertir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnSalir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Ingresar Distancia");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Resultado");

        ingresarCantidad.setPreferredSize(new java.awt.Dimension(45, 20));
        ingresarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarCantidadActionPerformed(evt);
            }
        });

        resultadoConversion.setPreferredSize(new java.awt.Dimension(45, 20));
        resultadoConversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultadoConversionActionPerformed(evt);
            }
        });

        A.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        A.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguna", "KM", "M", "CM", "ML", "FT", "IN" }));
        A.setMinimumSize(new java.awt.Dimension(45, 20));
        A.setPreferredSize(new java.awt.Dimension(45, 20));
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });

        DE.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DE.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ninguna", "KM", "M", "CM", "ML", "FT", "IN", " " }));
        DE.setMinimumSize(new java.awt.Dimension(45, 20));
        DE.setPreferredSize(new java.awt.Dimension(45, 20));
        DE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DEActionPerformed(evt);
            }
        });

        Convertir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Convertir.setText("Convertir");
        Convertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Convertir, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(DE, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ingresarCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(A, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(resultadoConversion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addComponent(jLabel2)
                                        .addGap(63, 63, 63)))))
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(ingresarCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DE, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(resultadoConversion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(A, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(Convertir, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        MenuPrincipal newframe = new MenuPrincipal();
        newframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void ingresarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarCantidadActionPerformed

    }//GEN-LAST:event_ingresarCantidadActionPerformed

    private void resultadoConversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultadoConversionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultadoConversionActionPerformed

    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
        a = A.getSelectedItem().toString();
    }//GEN-LAST:event_AActionPerformed

    private void DEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DEActionPerformed
        de = DE.getSelectedItem().toString();
    }//GEN-LAST:event_DEActionPerformed

    private void ConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertirActionPerformed

        Double ingresa = Double.parseDouble(ingresarCantidad.getText());

        switch (de){
            
            case ("Ninguna"):
               
               JOptionPane.showMessageDialog(this, "Seleccionar Dsitancia");
               
            break;
            case ("KM"):
            if(a.equals("M")){
                m = 1000;                
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, m)));
            }else if(a.equals("CM")){
                cm = 100000;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, cm)));
            }else if(a.equals("ML")){
                ml = 1.609;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ml)));
            }else if(a.equals("FT")){
                ft = 3281;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, ft)));
            }else if(a.equals("IN")){
                in = 39370;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, in)));
            }else {
                JOptionPane.showMessageDialog(this, "Seleccionar otra medida de distancia");
            }
            break;
            case ("M"):
            if(a.equals("KM")){
                km = 1000;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, km)));
            }else if(a.equals("CM")){
                cm = 100;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, cm)));
            }else if(a.equals("ML")){
                ml = 1609;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ml)));
            }else if(a.equals("FT")){
                ft = 3.281;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, ft)));
            }else if(a.equals("IN")){
                in = 39.37 ;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, in)));
            }else {
                JOptionPane.showMessageDialog(this, "Seleccionar otra medida de distancia");
            }
            break;
            case ("CM"):
            if(a.equals("KM")){
                km = 100000;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, km)));
            }else if(a.equals("M")){
                m = 100;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, m)));
            }else if(a.equals("ML")){
                ml = 160900;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ml)));
            }else if(a.equals("FT")){
                ft = 30.48;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ft)));
            }else if(a.equals("IN")){
                in = 2.54;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, in)));
            }else {
                JOptionPane.showMessageDialog(this, "Seleccionar otra medida de distancia");
            }
            break;
            case ("ML"):
            if(a.equals("KM")){
                km = 1.609;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa,km)));
            }else if(a.equals("M")){
                m = 1609;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, m)));
            }else if(a.equals("CM")){
                cm = 160900;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, cm)));
            }else if(a.equals("FT")){
                ft = 5280;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa,ft)));
            }else if(a.equals("IN")){
                in = 63360;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, in)));
            }else {
                JOptionPane.showMessageDialog(this, "Seleccionar otra medida de distancia");
            }
            break;
            case ("FT"):
            if(a.equals("KM")){
                km = 3281 ;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, km)));
            }else if(a.equals("M")){
                m = 3.281;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, m)));
            }else if(a.equals("CM")){
                cm = 30.48;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, cm)));
            }else if(a.equals("ML")){
                ml = 5280;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ml)));
            }else if(a.equals("IN")){
                in = 12;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, in)));
            }else {
                JOptionPane.showMessageDialog(this, "Seleccionar otra medida de distancia");
            }
            break;
            case ("IN"):
            if(a.equals("KM")){
                km = 39370;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, km)));
            }else if(a.equals("M")){
                 m = 39.37;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, m)));
            }else if(a.equals("CM")){
                cm = 2.54;
                resultadoConversion.setText(Double.toString(calcular.mulDistancia(ingresa, cm)));
            }else if(a.equals("ML")){
                ml = 63360;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ml)));
            }else if(a.equals("FT")){
                ft = 12;
                resultadoConversion.setText(Double.toString(calcular.divDistancia(ingresa, ft)));
            }else {
                JOptionPane.showMessageDialog(this, "Seleccionar otra medida de distancia");
            }
            break;
            
            default:
            JOptionPane.showMessageDialog(this, "Medida de distancia no diponible");

        }
    }//GEN-LAST:event_ConvertirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConvertidorDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConvertidorDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConvertidorDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConvertidorDistancia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConvertidorDistancia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> A;
    private javax.swing.JButton Convertir;
    private javax.swing.JComboBox<String> DE;
    private javax.swing.JButton btnSalir;
    private javax.swing.JTextField ingresarCantidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField resultadoConversion;
    // End of variables declaration//GEN-END:variables
}
